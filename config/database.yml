# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  # Use the DATABASE_URL environment variable if set, otherwise use local config
  url: <%= ENV['DATABASE_URL'] %>
  # The following settings apply if DATABASE_URL is not set
  host: <%= ENV.fetch('DB_HOST') { ENV['DOCKER_ENV'] ? 'db' : 'localhost' } %>
  username: <%= ENV.fetch('DB_USERNAME') { 'postgres' } %>
  password: <%= ENV.fetch('DB_PASSWORD') { 'password' } %>
  # Increase this value if you need to run complex transactions or have many concurrent users
  timeout: 5000

development:
  <<: *default
  database: <%= ENV.fetch('DB_NAME') { 'good_night_app_development' } %>
  # Enable schema comments in development environment for better documentation
  schema_comments: true
  # Use a minimum pool size for dev environment
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  # Enable logging of SQL queries for debugging
  log_statement: 'all'  # Records all SQL statements
  min_messages: 'debug' # Controls logging verbosity

  # The specified database role being used to connect to PostgreSQL.
  # To create additional roles in PostgreSQL see `$ createuser --help`.
  # When left blank, PostgreSQL will use the default role. This is
  # the same name as the operating system user running Rails.
  #username: good_night_app

  # The password associated with the PostgreSQL role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: <%= ENV.fetch('TEST_DB_NAME') { 'good_night_app_test' } %>
  # Use a minimum pool size for the test environment
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  # Set a shorter timeout for tests to fail faster if there's an issue
  timeout: 2000

# Used by the bin/rails db:seed command
seed:
  <<: *default
  database: <%= ENV.fetch('DB_NAME') { 'good_night_app_development' } %>

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  <<: *default
  database: <%= ENV.fetch('DB_NAME') { 'good_night_app_production' } %>
  username: <%= ENV.fetch('DB_USERNAME') { 'good_night_app' } %>
  password: <%= ENV.fetch('DB_PASSWORD') { ENV["GOOD_NIGHT_APP_DATABASE_PASSWORD"] } %>
  # Increase connection pool for production
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 10 } %>
  # Log only slow queries (>200ms) to balance information and performance
  log_min_duration_statement: 200
  # Don't log all statements, only those that meet the duration threshold
  log_statement: 'none'
  # Prevent connection timeouts under load
  timeout: 5000
  # Enable statement timeout to prevent long-running queries
  variables:
    statement_timeout: <%= ENV.fetch("STATEMENT_TIMEOUT") { "10s" } %>
